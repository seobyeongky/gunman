// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input.proto

#ifndef PROTOBUF_input_2eproto__INCLUDED
#define PROTOBUF_input_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_input_2eproto();
void protobuf_AssignDesc_input_2eproto();
void protobuf_ShutdownFile_input_2eproto();

class Vector2d;
class Input;

enum InputType {
  INPUT_LEFT_MOUSE_DOWN = 0,
  INPUT_LEFT_MOUSE_UP = 1,
  INPUT_RIGHT_MOUSE_DOWN = 2,
  INPUT_RIGHT_MOUSE_UP = 3,
  INPUT_MOUSE_MOVE = 4,
  INPUT_KEY_DOWN = 5,
  INPUT_KEY_UP = 6
};
bool InputType_IsValid(int value);
const InputType InputType_MIN = INPUT_LEFT_MOUSE_DOWN;
const InputType InputType_MAX = INPUT_KEY_UP;
const int InputType_ARRAYSIZE = InputType_MAX + 1;

const ::google::protobuf::EnumDescriptor* InputType_descriptor();
inline const ::std::string& InputType_Name(InputType value) {
  return ::google::protobuf::internal::NameOfEnum(
    InputType_descriptor(), value);
}
inline bool InputType_Parse(
    const ::std::string& name, InputType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InputType>(
    InputType_descriptor(), name, value);
}
// ===================================================================

class Vector2d : public ::google::protobuf::Message {
 public:
  Vector2d();
  virtual ~Vector2d();

  Vector2d(const Vector2d& from);

  inline Vector2d& operator=(const Vector2d& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2d& default_instance();

  void Swap(Vector2d* other);

  // implements Message ----------------------------------------------

  Vector2d* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector2d& from);
  void MergeFrom(const Vector2d& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Vector2d)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_input_2eproto();
  friend void protobuf_AssignDesc_input_2eproto();
  friend void protobuf_ShutdownFile_input_2eproto();

  void InitAsDefaultInstance();
  static Vector2d* default_instance_;
};
// -------------------------------------------------------------------

class Input : public ::google::protobuf::Message {
 public:
  Input();
  virtual ~Input();

  Input(const Input& from);

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Input& default_instance();

  void Swap(Input* other);

  // implements Message ----------------------------------------------

  Input* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Input& from);
  void MergeFrom(const Input& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::uint32 pid() const;
  inline void set_pid(::google::protobuf::uint32 value);

  // required .InputType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::InputType type() const;
  inline void set_type(::InputType value);

  // optional .Vector2d pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline const ::Vector2d& pos() const;
  inline ::Vector2d* mutable_pos();
  inline ::Vector2d* release_pos();
  inline void set_allocated_pos(::Vector2d* pos);

  // optional int32 key = 4;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 4;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Input)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pid_;
  int type_;
  ::Vector2d* pos_;
  ::google::protobuf::int32 key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_input_2eproto();
  friend void protobuf_AssignDesc_input_2eproto();
  friend void protobuf_ShutdownFile_input_2eproto();

  void InitAsDefaultInstance();
  static Input* default_instance_;
};
// ===================================================================


// ===================================================================

// Vector2d

// required int32 x = 1;
inline bool Vector2d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector2d::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector2d::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector2d::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Vector2d::x() const {
  return x_;
}
inline void Vector2d::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 2;
inline bool Vector2d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector2d::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector2d::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector2d::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Vector2d::y() const {
  return y_;
}
inline void Vector2d::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// Input

// required uint32 pid = 1;
inline bool Input::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Input::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Input::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Input::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 Input::pid() const {
  return pid_;
}
inline void Input::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
}

// required .InputType type = 2;
inline bool Input::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Input::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Input::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Input::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::InputType Input::type() const {
  return static_cast< ::InputType >(type_);
}
inline void Input::set_type(::InputType value) {
  assert(::InputType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .Vector2d pos = 3;
inline bool Input::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Input::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Input::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Input::clear_pos() {
  if (pos_ != NULL) pos_->::Vector2d::Clear();
  clear_has_pos();
}
inline const ::Vector2d& Input::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Vector2d* Input::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Vector2d;
  return pos_;
}
inline ::Vector2d* Input::release_pos() {
  clear_has_pos();
  ::Vector2d* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void Input::set_allocated_pos(::Vector2d* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// optional int32 key = 4;
inline bool Input::has_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Input::set_has_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Input::clear_has_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Input::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 Input::key() const {
  return key_;
}
inline void Input::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::InputType>() {
  return ::InputType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_input_2eproto__INCLUDED
